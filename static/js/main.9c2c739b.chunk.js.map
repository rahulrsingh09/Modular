{"version":3,"sources":["reportWebVitals.ts","api.ts","Components/Emoji/Emoji.styled.tsx","Components/Emoji/Emoji.tsx","Components/Trigger/Trigger.styled.tsx","Components/Tooltip/Tootip.styled.tsx","Components/Trigger/Trigger.tsx","Containers/AppComponent.styled.tsx","Components/Tabs/Tabs.tsx","Components/Summary/Summary.styled.tsx","Components/Item/Item.styled.tsx","Components/Item/Item.tsx","Components/Summary/Summary.tsx","Components/Spinner/Spinner.styled.tsx","Components/ReactionButton/ReactionButton.styled.tsx","Components/ReactionButton/ReactionButton.tsx","Containers/AppContainer.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","axios","create","baseURL","Span","styled","span","props","customPadding","preventHover","Emoji","role","aria-label","name","aria-hidden","emoji","id","defaultProps","React","memo","Div","div","ToolTipText","visibility","width","display","alignItems","backgroundColor","padding","color","textAlign","borderRadius","position","zIndex","bottom","left","marginLeft","content","top","borderWidth","borderStyle","borderColor","ToolTip","Trigger","reactions","map","reaction","onMouseEnter","onHoverEventHandler","onClick","onClickHandler","EmojiButton","Tabs","Tab","button","active","Content","SmallCircle","Text","TabHeader","height","emphasis","TabHeaderContainer","SummaryHeader","DetailsComponent","ItemContainer","Image","img","Item","src","user","avatar","first_name","last_name","SummaryComponent","_userIdToUsersMap","Map","_reactionIdToReactionsMap","_userContentReactionsMap","getTabs","index","tabClickHandler","globalTabIndex","reactionMapCount","get","getFilteredContent","tabIndex","filteredContent","userIds","undefined","userId","getAllContent","userContentReactions","userContentId","user_id","reaction_id","getTabContent","users","forEach","set","userContent","push","this","rotate360","keyframes","Spinner","ReactionButton","activeReaction","onToggleClickHandler","AppContainer","state","activeTabIndex","toggleEmojis","_reactionMapCount","reactionId","setState","onClickEventHandler","onEmojiButtonClickHandler","prevState","Promise","all","API","data","length","userReaction","countOfReactions","console","log","renderedView","Summary","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c2c739b.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\n\nexport const REACTIONS_REQUEST = 'reactions';\nexport const USER_CONTENT_REACTIONS = '/user_content_reactions ';\nexport const USERS = '/users ';\n\nexport default axios.create({\n    baseURL: `https://artful-iudex.herokuapp.com/`\n});","import styled from \"styled-components\";\n\n\nconst Span = styled.span<{preventHover: boolean, customPadding: string}>`\n  padding: ${(props) => props.customPadding ? props.customPadding: null};\n  display: inline-block;\n  transition: transform .2s;\n  cursor: pointer; \n  ${(props) => !props.preventHover && `&:hover{\n    transform: scale(2);\n    position: relative;\n    bottom: 8px;\n}`}\n`\n\nexport {Span}","import React from 'react';\nimport {IReaction} from \"../../Types/reactions.types\";\nimport {Span} from \"./Emoji.styled\";\n\nexport interface IEmoji extends IReaction{\n    preventHover: boolean;\n    customPadding: string;\n}\n\nconst Emoji = (props: IEmoji) => (\n    <Span\n        customPadding={props.customPadding}\n        preventHover={props.preventHover}\n        role=\"img\"\n        aria-label={props.name ? props.name : \"\"}\n        aria-hidden={props.name ? \"false\" : \"true\"}\n        key={props.id}\n    >\n        {props.emoji}\n    </Span>\n);\n\nEmoji.defaultProps ={\n    preventHover: false,\n    customPadding:'2px 8px 4px 8px'\n}\nexport default React.memo(Emoji);","import styled from \"styled-components\";\n\n\nconst Div = styled.div`\n  padding: 0px 12px;\n  display: flex;\n  box-sizing: border-box;\n  -webkit-box-shadow: 3px 0px 35px -8px rgba(0,0,0,0.24);\n  -moz-box-shadow: 3px 0px 35px -8px rgba(0,0,0,0.24);\n  box-shadow: 3px 0px 35px -8px rgba(0,0,0,0.24);\n  border-radius: 24px;\n  width: min-content;\n  height: min-content;\n`\n\nexport {Div}","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ToolTipText = styled(\"span\")({\n    visibility: \"hidden\",\n    width: \"60px\",\n    display:\"grid\",\n    alignItems:\"center\",\n    backgroundColor: \"#161616\",\n    padding: \"12px 16px\",\n    color: \"#fff\",\n    textAlign: \"center\",\n    borderRadius: \"2px\",\n    position: \"absolute\",\n    zIndex: 1,\n    bottom: \"150%\",\n    left: \"50%\",\n    marginLeft: \"-45px\",\n    \":after\": {\n        content: '\"\"',\n        position: \"absolute\",\n        top: \"100%\",\n        left: \"50%\",\n        marginLeft: \"-5px\",\n        borderWidth: \"5px\",\n        borderStyle: \"solid\",\n        borderColor: \"#161616 transparent transparent transparent\"\n    }\n});\n\nconst ToolTip = styled(\"div\")({\n    position: \"relative\",\n    display: \"inline-block\",\n    \":hover span\": {\n        visibility: \"visible\"\n    }\n});\n\nexport {ToolTip, ToolTipText}\n","import * as React from 'react';\nimport {IReactions} from \"../../Types/reactions.types\";\nimport Emoji from \"../Emoji/Emoji\";\nimport {Div} from \"./Trigger.styled\";\nimport {ToolTip, ToolTipText} from \"../Tooltip/Tootip.styled\";\n\ninterface ITriggerProps extends IReactions{\n   onHoverEventHandler: (data: any) => void\n   onClickHandler: (data: any) => void\n}\n\nconst Trigger = (props: ITriggerProps) => {\n\n   const getEmojisList = (): React.ReactElement => {\n      const list = <React.Fragment>\n         {props.reactions.map(reaction =>\n             <ToolTip onMouseEnter={() => props.onHoverEventHandler(reaction.id)} onClick={() => props.onClickHandler(reaction)}>\n                <Emoji id={reaction.id} name={reaction.name} emoji={reaction.emoji} key={reaction.id}/>\n                <ToolTipText>\n                   {reaction.name}\n                </ToolTipText>\n             </ToolTip>\n             )}\n      </React.Fragment>\n      return list\n   }\n\n   return (\n       <Div>\n          {getEmojisList()}\n       </Div>\n   )\n}\n\nexport default React.memo(Trigger)","import styled from \"styled-components\";\n\n\nconst Div = styled.div`\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n`\n\nconst EmojiButton = styled.div`\n  width: 40px;\n  height: 40px;\n  background-color: red;\n`\n\nexport {Div, EmojiButton}","import styled from \"styled-components\";\n\nexport const Tabs = styled.div`\n  height: 40px;\n`;\n\nexport const Tab = styled.button<{active: boolean}>`\n  border-style: none;\n  background-color: #fff;\n  padding: 0 16px;\n  outline: none;\n  height: 40px;\n  cursor: pointer;\n  position: relative;\n  font-size: 14px;\n  border-bottom:  ${props => (props.active ? \"2px solid #0f62fe\" : \"2px solid rgba(0,0,0,0.24)\")};\n\n`;\n\nexport const Content = styled.div<{active: boolean}>`\n  ${props => (props.active ? \"\" : \"display:none\")}\n  \n`;\n","import styled from \"styled-components\";\n\nconst Div = styled.div`\n    width: max-content;\n    -webkit-box-shadow: 3px 0px 35px -8px rgba(0,0,0,0.24);\n    -moz-box-shadow: 3px 0px 35px -8px rgba(0,0,0,0.24);\n    box-shadow: 3px 0px 35px -8px rgba(0,0,0,0.24);\n`\n\nconst SmallCircle = styled.span`\n  width: 4px;\n  display: inline-block;\n  height: 4px;\n  border-radius: 50%;\n  background-color: black;\n`\n\nconst Text = styled.span`\n  padding-left: 8px;\n`\nconst TabHeader = styled.div<{height?: string, emphasis?: string}>`\n display: flex;\n justify-content: center;\n align-items: center;\n height: ${(props) => props.height};\n ${(props) => props.emphasis && `font-weight: ${props.emphasis}`}\n`\n\nconst TabHeaderContainer = styled.div`\n  width: max-content;\n  height: max-content;\n`\n\nconst SummaryHeader = styled.div`\n  font-weight: bold;\n  padding: 24px 16px 16px 16px;\n`\n\nconst DetailsComponent = styled.div`\n  display: flex;\n  height: 300px;\n  width: 100%;\n  overflow-x: auto;\n`\n\nexport {Div, SmallCircle, Text, TabHeader, TabHeaderContainer,SummaryHeader, DetailsComponent}","import styled from \"styled-components\";\n\nconst ItemContainer = styled.div`\n  padding: 16px 16px 0px 16px;\n  box-sizing: border-box;\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n`\n\nconst Image = styled.img`\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n`\n\nconst Text = styled.span`\n  text-align: center;\n`\n\nexport {Image, ItemContainer, Text}","import * as React from 'react';\nimport {Image, ItemContainer, Text} from \"./Item.styled\";\nimport {IReaction} from \"../../Types/reactions.types\";\nimport {IUser} from \"../../Types/user.types\";\nimport Emoji from \"../Emoji/Emoji\";\n\n\ninterface IItemProps{\n    user: IUser;\n    reaction: IReaction;\n}\n\nconst Item = (props: IItemProps) => {\n\n    return (\n        <ItemContainer>\n            <Image src={props.user.avatar}/>\n            <Emoji emoji={props.reaction.emoji} id={props.reaction.id} name={props.reaction.name}/>\n            <Text>\n                {props.user.first_name}&nbsp;{props.user.last_name}\n            </Text>\n        </ItemContainer>\n    )\n}\n\nexport default React.memo(Item)","import * as React from 'react';\nimport {IUserContentReaction} from \"../../Types/userContent.types\";\nimport {IReaction} from \"../../Types/reactions.types\";\nimport {Content, Tab, Tabs} from \"../Tabs/Tabs\";\nimport {IUser} from \"../../Types/user.types\";\nimport Emoji from \"../Emoji/Emoji\";\nimport {DetailsComponent, Div, SmallCircle, SummaryHeader, TabHeader, TabHeaderContainer, Text} from \"./Summary.styled\";\nimport Item from \"../Item/Item\";\n\nconst ALL_TAB_INDEX = 999;\n\n\ninterface ISummaryComponentProps {\n    users: Array<IUser>;\n    userContentReactions: Array<IUserContentReaction>;\n    reactions: Array<IReaction>;\n    reactionMapCount: Map<number,number>;\n    globalTabIndex: number;\n    tabClickHandler: (data: number) => void;\n}\n\ninterface ISummaryComponentState{\n}\n\nclass SummaryComponent extends React.PureComponent<ISummaryComponentProps, ISummaryComponentState> {\n    \n    _userIdToUsersMap: Map<number, IUser> = new Map<number, IUser>();\n    _reactionIdToReactionsMap: Map<number, IReaction> = new Map<number, IReaction>();\n    _userContentReactionsMap: Map<number, Array<number>> = new Map<number, Array<number>>();\n    constructor(props: ISummaryComponentProps) {\n        super(props);\n        props.users.forEach((user) => {\n            this._userIdToUsersMap.set(user.id, user)\n        })\n        props.reactions.forEach((reaction) => {\n            this._reactionIdToReactionsMap.set(reaction.id, reaction)\n        })\n        props.userContentReactions.forEach((userContent) => {\n            let userIds:Array<number> | undefined = this._userContentReactionsMap.get(userContent.reaction_id);\n            if(userIds == undefined) userIds = [];\n            userIds.push(userContent.user_id)\n            this._userContentReactionsMap.set(userContent.reaction_id, userIds)\n        })\n    }\n\n    getTabs = () => {\n        const Tabs = this.props.reactions.map((reaction, index) => {\n            return (\n                <Tab onClick={() => this.props.tabClickHandler(index)} active={this.props.globalTabIndex === reaction.id}>\n                    <TabHeader>\n                        <Emoji emoji={reaction.emoji} name={reaction.name}\n                               id={reaction.id} key={reaction.id} preventHover={true}\n                               customPadding={'2px 8px 4px 0px'}/>\n                        <SmallCircle/>\n                        <Text>{this.props.reactionMapCount.get(reaction.id)}</Text>\n                    </TabHeader>\n                </Tab>\n            )\n        })\n        return Tabs;\n    }\n\n    getFilteredContent = (id:number, tabIndex:number) => {\n        let filteredContent;\n            const userIds = this._userContentReactionsMap.get(id);\n            if(userIds != undefined ){\n                filteredContent = userIds.map(userId => {\n                    const user = this._userIdToUsersMap.get(userId);\n                    const reaction:IReaction | undefined = this._reactionIdToReactionsMap.get(id)\n                    if(user != undefined && reaction !=undefined){\n                        return <Item user={user} reaction={reaction}/>\n                    }\n                })\n        }\n        return filteredContent;\n    }\n\n    getAllContent = () => {\n        let filteredContent;\n        filteredContent = this.props.userContentReactions.map(userContentId => {\n            const user: IUser | undefined = this._userIdToUsersMap.get(userContentId.user_id);\n            const reaction:IReaction | undefined = this._reactionIdToReactionsMap.get(userContentId.reaction_id)\n            if (user !=undefined && reaction !=undefined) return <Item user={user} reaction={reaction}/>\n        })\n        return filteredContent;\n    }\n\n    getTabContent = () => {\n        const TabContent = this.props.reactions.map((reaction, index) => {\n            return (\n                <Content active={this.props.globalTabIndex === reaction.id}>\n                    {this.props.globalTabIndex === reaction.id && this.getFilteredContent(reaction.id, this.props.globalTabIndex)}\n                </Content>\n            )\n        })\n        return TabContent;\n    }\n\n\n    render() {\n        return (\n            <Div>\n                <SummaryHeader>Reactions</SummaryHeader>\n                <TabHeaderContainer>\n                    <Tabs>\n                        <Tab onClick={() => this.props.tabClickHandler(ALL_TAB_INDEX)} active={this.props.globalTabIndex === ALL_TAB_INDEX}>\n                            <TabHeader height={'39px'} emphasis={'bold'} >\n                                All\n                            </TabHeader>\n                        </Tab>\n                        {this.getTabs()}\n                    </Tabs>\n                </TabHeaderContainer>\n                <DetailsComponent>\n                    <Content active={this.props.globalTabIndex === ALL_TAB_INDEX}>\n                        {this.getAllContent()}\n                    </Content>\n                    {this.getTabContent()}\n                </DetailsComponent>\n            </Div>\n        );\n    }\n\n}\n\nexport default SummaryComponent;","import styled, { keyframes } from \"styled-components\";\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Spinner = styled.div`\n  animation: ${rotate360} 1s linear infinite;\n  transform: translateZ(0);\n  \n  border-top: 2px solid grey;\n  border-right: 2px solid grey;\n  border-bottom: 2px solid grey;\n  border-left: 4px solid black;\n  background: transparent;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n`;\n\nexport default Spinner;","import styled from \"styled-components\";\n\nconst Div = styled.div<{active:boolean}>`\n    height: 32px;\n    border-radius: 24px;\n    width:50px;\n    box-sizing: border-box;\n    display: flex;\n    padding: 0 8px;\n    align-items: center;\n    ${(props) => props.active && \"border:1px solid #0f62fe\"};\n    ${(props) => props.active && \"​background-color: #edf5ff\"};\n`\n\nexport {Div}","import * as React from 'react';\nimport {IReaction} from \"../../Types/reactions.types\";\nimport {Div} from \"./ReactionButton.styled\";\nimport Emoji from \"../Emoji/Emoji\";\n\n\ninterface IReactionButtonProps {\n    onToggleClickHandler: (data: any) => void\n    activeReaction: IReaction\n}\n\nconst ReactionButton = (props: IReactionButtonProps) => {\n\n    return (\n        (props.activeReaction && props.activeReaction.id) ? (\n            <Div active={props.activeReaction.id !== null} onClick={() => props.onToggleClickHandler({})}>\n                <Emoji name={props.activeReaction.name} emoji={props.activeReaction.emoji} id={props.activeReaction.id}\n                       preventHover={true} customPadding={\"0 8px 0 0\"}/>\n                1\n            </Div>\n        ) : null\n    )\n}\n\nexport default React.memo(ReactionButton)","import * as React from 'react';\nimport API, {REACTIONS_REQUEST, USER_CONTENT_REACTIONS, USERS} from \"../api\";\nimport {IReaction, IReactions} from \"../Types/reactions.types\";\nimport Trigger from \"../Components/Trigger/Trigger\";\nimport {Div, EmojiButton} from \"./AppComponent.styled\";\nimport {IUser} from \"../Types/user.types\";\nimport {IUserContentReaction} from \"../Types/userContent.types\";\nimport SummaryComponent from \"../Components/Summary/Summary\";\nimport Spinner from \"../Components/Spinner/Spinner.styled\";\nimport ReactionButton from \"../Components/ReactionButton/ReactionButton\";\n\n\ninterface IAppComponentProps {\n\n}\n\ninterface IAppComponentState extends IReactions{\n    activeTabIndex: number;\n    users: Array<IUser>;\n    userContentReactions: Array<IUserContentReaction>;\n    toggleEmojis: boolean;\n    activeReaction: IReaction\n}\n\nclass AppContainer extends React.PureComponent<IAppComponentProps, IAppComponentState> {\n    state:IAppComponentState = {\n        reactions: [],\n        users: [],\n        userContentReactions: [],\n        activeTabIndex: 1,\n        activeReaction: {} as IReaction,\n        toggleEmojis: false\n    }\n    _reactionMapCount: Map<number,number> = new Map<number, number>()\n    async componentDidMount() {\n        try{\n            const [reactions, users, userContentReactions] = await Promise.all([\n                API.get(REACTIONS_REQUEST),\n                API.get(USERS),\n                API.get(USER_CONTENT_REACTIONS)\n            ]);\n            if(reactions.data && reactions.data.length) this.setState({\n                reactions: reactions.data as Array<IReaction>\n            })\n            if(users.data && users.data.length) this.setState({\n                users: users.data as Array<IUser>\n            })\n            if(userContentReactions.data && userContentReactions.data.length){\n                userContentReactions.data.forEach((userReaction: IUserContentReaction) => {\n                    const countOfReactions = this._reactionMapCount.get(userReaction.reaction_id);\n                    this._reactionMapCount.set(userReaction.reaction_id, countOfReactions ? countOfReactions + 1 : 1)\n                    }\n                )\n                this.setState({\n                    userContentReactions: userContentReactions.data as Array<IUserContentReaction>\n                })\n            }\n\n        }catch(error){\n            console.log(error);\n        }\n    }\n\n    onHoverEventHandler = (reactionId: number) => {\n        this.setState({\n            activeTabIndex: reactionId\n        })\n    }\n\n    onClickEventHandler = (reaction: IReaction) => {\n        this.setState({\n            activeReaction: reaction\n        })\n    }\n\n    tabClickHandler = (index:number) => {\n        if (index !== this.state.activeTabIndex) {\n            this.setState({activeTabIndex: index});\n        }\n    };\n\n\n    onEmojiButtonClickHandler = () => {\n        this.setState(prevState => ({\n            toggleEmojis: !prevState.toggleEmojis\n        }))\n    }\n\n    render() {\n        const renderedView = (\n            this.state.userContentReactions.length ? (\n                <React.Fragment>\n                    {this.state.toggleEmojis && <Trigger reactions={this.state.reactions}\n                                                         onHoverEventHandler={this.onHoverEventHandler}\n                                                         onClickHandler = {this.onClickEventHandler}/> }\n                    <EmojiButton onClick={this.onEmojiButtonClickHandler}/>\n                    <SummaryComponent users={this.state.users} userContentReactions={this.state.userContentReactions}\n                                      reactions={this.state.reactions} reactionMapCount={this._reactionMapCount}\n                                      globalTabIndex={this.state.activeTabIndex} tabClickHandler={this.tabClickHandler}/>\n                    {this.state.activeReaction && this.state.activeReaction.id &&\n                    <ReactionButton onToggleClickHandler={this.onClickEventHandler} activeReaction={this.state.activeReaction}/>}\n                </React.Fragment>\n            ) : <Spinner/>\n        )\n        return (\n            <Div>\n                {renderedView}\n            </Div>\n        )\n    }\n\n}\n\nexport default AppContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppContainer from \"./Containers/AppContainer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}